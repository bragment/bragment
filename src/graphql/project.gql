fragment IProject on Project {
  __typename
  objectId
  id
  title
  description
  visibility
  image
  color
}

fragment IProjectView on ProjectView {
  __typename
  objectId
  id
  title
  columnOrder {
    ... on Element {
      value
    }
  }
}

fragment IProjectColumn on ProjectColumn {
  __typename
  objectId
  id
  title
  itemOrder {
    ... on Element {
      value
    }
  }
}

mutation CreateProject($input: CreateProjectInput!) {
  createProject(input: $input) {
    project {
      ...IProject
    }
  }
}

mutation CreateProjectColumn($input: CreateProjectColumnInput!) {
  createProjectColumn(input: $input) {
    projectColumn {
      ...IProjectColumn
    }
    projectView {
      ...IProjectView
    }
  }
}

mutation RenameProjectColumn($input: UpdateProjectColumnInput!) {
  updateProjectColumn(input: $input) {
    projectColumn {
      __typename
      objectId
      id
      title
    }
  }
}

mutation moveProjectColumn($input: MoveProjectColumnInput!) {
  moveProjectColumn(input: $input) {
    fromProjectView {
      ...IProjectView
    }
    toProjectView {
      ...IProjectView
    }
  }
}

query GetProjectAllItems($id: ID!) {
  projectViews(where: { project: { have: { id: { equalTo: $id } } } }) {
    count
    edges {
      node {
        ...IProjectView
      }
    }
  }
  projectColumns(where: { project: { have: { id: { equalTo: $id } } } }) {
    count
    edges {
      node {
        ...IProjectColumn
      }
    }
  }
}

query GetProject($id: ID!) {
  project(id: $id) {
    ...IProject
  }
}

query GetProjectView($id: ID!) {
  projectView(id: $id) {
    ...IProjectView
  }
}

query GetProjectColumn($id: ID!) {
  projectColumn(id: $id) {
    ...IProjectColumn
  }
}

query GetAllProjects {
  projects(order: updatedAt_DESC) {
    count
    edges {
      node {
        ...IProject
      }
    }
  }
}

query WriteProjectView($id: ID!) {
  projectView(id: $id) {
    ...IProjectView
  }
}
